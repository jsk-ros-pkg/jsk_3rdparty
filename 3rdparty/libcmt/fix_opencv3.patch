diff --git a/CMT.cpp b/CMT.cpp
index a587453..bfb483e 100644
--- a/CMT.cpp
+++ b/CMT.cpp
@@ -108,11 +108,16 @@ void CMT::initialise(cv::Mat im_gray0, cv::Point2f topleft, cv::Point2f bottomri
 {
 
     //Initialise detector, descriptor, matcher
+#if OPENCV_VERSION_CODE<OPENCV_VERSION(3,1,0)
     detector = cv::Algorithm::create<cv::FeatureDetector>(detectorType.c_str());
     descriptorExtractor = cv::Algorithm::create<cv::DescriptorExtractor>(descriptorType.c_str());
     descriptorMatcher = cv::DescriptorMatcher::create(matcherType.c_str());
     std::vector<std::string> list;
     cv::Algorithm::getList(list);
+#else
+    detector = cv::BRISK::create();
+    descriptorMatcher = cv::DescriptorMatcher::create(matcherType.c_str());
+#endif
 
     //Get initial keypoints in whole image
     std::vector<cv::KeyPoint> keypoints;
@@ -122,7 +127,11 @@ void CMT::initialise(cv::Mat im_gray0, cv::Point2f topleft, cv::Point2f bottomri
     std::vector<cv::KeyPoint> selected_keypoints;
     std::vector<cv::KeyPoint> background_keypoints;
     inout_rect(keypoints, topleft, bottomright, selected_keypoints, background_keypoints);
+#if OPENCV_VERSION_CODE<OPENCV_VERSION(3,1,0)
     descriptorExtractor->compute(im_gray0, selected_keypoints, selectedFeatures);
+#else
+    detector->compute(im_gray0, selected_keypoints, selectedFeatures);
+#endif
 
     if(selected_keypoints.size() == 0)
     {
@@ -132,7 +141,11 @@ void CMT::initialise(cv::Mat im_gray0, cv::Point2f topleft, cv::Point2f bottomri
 
     //Remember keypoints that are not in the rectangle as background keypoints
     cv::Mat background_features;
+#if OPENCV_VERSION_CODE<OPENCV_VERSION(3,1,0)
     descriptorExtractor->compute(im_gray0, background_keypoints, background_features);
+#else
+    detector->compute(im_gray0, background_keypoints, background_features);
+#endif
 
     //Assign each keypoint a class starting from 1, background is 0
     selectedClasses = std::vector<int>();
@@ -527,7 +540,11 @@ void CMT::processFrame(cv::Mat im_gray)
     std::vector<cv::KeyPoint> keypoints;
     cv::Mat features;
     detector->detect(im_gray, keypoints);
+#if OPENCV_VERSION_CODE<OPENCV_VERSION(3,1,0)
     descriptorExtractor->compute(im_gray, keypoints, features);
+#else
+    detector->compute(im_gray, keypoints, features);
+#endif
 
     //Create list of active keypoints
     activeKeypoints = std::vector<std::pair<cv::KeyPoint, int> >();
diff --git a/CMT.h b/CMT.h
index 748cd09..2a49345 100644
--- a/CMT.h
+++ b/CMT.h
@@ -4,7 +4,15 @@
 #include <opencv2/opencv.hpp>
 #include <opencv2/features2d/features2d.hpp>
 
+#define OPENCV_VERSION(a,b,c) (((a) << 16) + ((b) << 8) + (c))
+#define OPENCV_VERSION_CODE OPENCV_VERSION(CV_MAJOR_VERSION, CV_MINOR_VERSION, CV_SUBMINOR_VERSION)
 
+#if OPENCV_VERSION_CODE>=OPENCV_VERSION(3,1,0) && OPENCV_VERSION_CODE<OPENCV_VERSION(3,2,0)
+  #include <opencv2/xfeatures2d.hpp>
+#endif
+#if OPENCV_VERSION_CODE>=OPENCV_VERSION(4,0,0)
+#include <opencv2/imgproc/types_c.h>
+#endif
 
 class CMT
 {
@@ -20,8 +25,12 @@ public:
     bool estimateScale;
     bool estimateRotation;
 
+#if OPENCV_VERSION_CODE<OPENCV_VERSION(3,1,0)
     cv::Ptr<cv::FeatureDetector> detector;
     cv::Ptr<cv::DescriptorExtractor> descriptorExtractor;
+#else
+    cv::Ptr<cv::Feature2D> detector;
+#endif
     cv::Ptr<cv::DescriptorMatcher> descriptorMatcher;
 
     cv::Mat selectedFeatures;
